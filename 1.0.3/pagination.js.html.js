tui.util.defineNamespace("fedoc.content", {});
fedoc.content["pagination.js.html"] = "      <div id=\"main\" class=\"main\">\n\n\n\n    \n    <section>\n        <article>\n            <pre class=\"prettyprint source linenums\"><code>/**\n * @fileoverview Core of pagination component, create pagination view and attach events.\n * (from pug.Pagination)\n * @author NHN entertainment FE dev team(dl_javascript@nhnent.com)\n * @dependency jquery-1.8.3.min.js, code-snippet.js\n */\n\nvar View = require('./view.js');\n\n/**\n * Pagination core class\n * @constructor Pagination\n *\n */\nvar Pagination = tui.util.defineClass(/**@lends Pagination.prototype */{\n    /**\n     * Initialize\n     * @param {DataObject} options Option object\n     * \t\t@param {Number} [options.itemCount=10] Total item count\n     * \t\t@param {Number} [options.itemPerPage=10] Item count per page\n     * \t\t@param {Number} [options.pagePerPageList=10] Display page link count\n     * \t\t@param {Number} [options.page=1] page Display page after pagination draw.\n     * \t\t@param {String} [options.moveUnit=\"pagelist\"] Page move unit.\n     * \t\t\t&lt;ul>\n     * \t\t\t\t&lt;li>pagelist : Move page for unit&lt;/li>\n     * \t\t\t\t&lt;li>page : Move one page&lt;/li>\n     * \t\t\t&lt;/ul>\n     * \t\t@param {Boolean}[options.isCenterAlign=false] Whether current page keep center or not\n     * \t\t@param {String} [options.insertTextNode=\"\"] The coupler between page links\n     * \t\t@param {String} [options.classPrefix=\"\"] A prefix of class name\n     * \t\t@param {String} [options.firstItemClassName=\"first-child\"] The class name is granted first page link item\n     * \t\t@param {String} [options.lastItemClassName=\"last-child\"] The class name is granted first page link item\n     * \t\t@param {String} [options.pageTemplate=\"&lt;a href='#'>{=page}&lt;/a>\"] The markup template to show page item such as 1, 2, 3, .. {=page} will be changed each page number.\n     * \t\t@param {String} [options.currentPageTemplate=\"&lt;strong>{=page}&lt;/strong>\"] The markup template for current page {=page} will be changed current page number.\n     * \t\t@param {jQueryObject} [options.$pre_endOn] The button element to move first page. If this option is not exist and the element that has class 'pre_end', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$preOn] The button element to move previouse page. If this option is not exist and the element that has class 'pre', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$nextOn] The button element to move next page. If this option is not exist and the element that has class 'next', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$lastOn] The button element to move last page. If this option is not exist and the element that has class 'last', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$pre_endOff] The element to show that pre_endOn button is not enable. If this option is not exist and the element that has class 'pre_endOff', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$preOff] The element to show that preOn button is not enable. If this option is not exist and the element that has class 'preOff', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$nextOff] The element to show that nextOn button is not enable. If this option is not exist and the element that has class 'nextOff', component do not create this button.\n     * \t\t@param {jQueryObject} [options.$lastOff] The element to show that lastOn button is not enable. If this option is not exist and the element that has class 'lastOff', component do not create this button.\n     * @param {jQueryObject} $element Pagination container\n     */\n    init: function(options, $element) {\n        var defaultOption = {\n            itemCount: 10,\n            itemPerPage: 10,\n            pagePerPageList: 10,\n            page: 1,\n            moveUnit: 'pagelist',\n            isCenterAlign: false,\n            insertTextNode: '',\n            classPrefix: '',\n            firstItemClassName: 'first-child',\n            lastItemClassName: 'last-child',\n            pageTemplate: '&lt;a href=\"#\">{=page}&lt;/a>',\n            currentPageTemplate: '&lt;strong>{=page}&lt;/strong>'\n        };\n\n\n        if (options.itemCount === 0) {\n            /**\n             * Option object\n             * @type {Object}\n             * @private\n             */\n            this._options = defaultOption;\n        } else {\n            this._options = tui.util.extend(defaultOption, options);\n        }\n\n        /**\n         * Event handler savor\n         * @type {Object}\n         * @private\n         */\n        this._events = {};\n\n        /**\n         * view instance\n         * @type {PaginationView}\n         * @private\n         */\n        this._view = new View(this._options, $element);\n        this._view.attachEvent('click', tui.util.bind(this._onClickPageList, this));\n\n        this.movePageTo(this.getOption('page'), false);\n    },\n\n    /**\n     * Reset pagination\n     * @api\n     * @param {*} itemCount Redraw page item count\n     * @example\n     *  pagination.reset();\n     */\n    reset: function(itemCount) {\n\n        var isExist = tui.util.isExisty((itemCount !== null) &amp;&amp; (itemCount !== undefined));\n\n        if (!isExist) {\n            itemCount = this.getOption('itemCount');\n        }\n\n        this.setOption('itemCount', itemCount);\n        this.movePageTo(1, false);\n    },\n\n    /**\n     * Get options\n     * @param {String} optionKey Option key\n     * @private\n     * @returns {*}\n     */\n    getOption: function(optionKey) {\n        return this._options[optionKey];\n    },\n\n    /**\n     * Move to specific page, redraw list.\n     * Befor move fire beforeMove event, After move fire afterMove event.\n     * @api\n     * @param {Number} targetPage Target page\n     * @param {Boolean} isNotRunCustomEvent [isNotRunCustomEvent=true] Whether custom event fire or not\n     * @example\n     *  pagination.movePageTo(10); // Move without custom-events - \"beforeMove\", \"afterMove\"\n     *  pagination.movePageTo(10, false) // Move with custom-events - \"beforeMove\", \"afterMove\"\n     */\n    movePageTo: function(targetPage, isNotRunCustomEvent) {\n\n        targetPage = this._convertToAvailPage(targetPage);\n        this._currentPage = targetPage;\n\n        if (!isNotRunCustomEvent) {\n            /**\n             * Fire 'beforeMove' event(CustomEvent)\n             * @api\n             * @event Pagination#beforeMove\n             * @param {componentEvent} eventData\n             * @param {String} eventData.eventType Custom event name\n             * @param {Number} eventData.page Target page\n             * @param {Function} eventData.stop Stop move specific page\n             * @example\n             * paganation.on(\"beforeMove\", function(eventData) {\n                var currentPage = eventData.page;\n             });\n             */\n\n            if (!this.invoke('beforeMove', { page: targetPage })) {\n                return;\n            }\n        }\n\n        this._paginate(targetPage);\n\n        if (isNotRunCustomEvent) {\n            /**\n             * Fire 'afterMove'\n             * @api\n             * @event Pagination#afterMove\n             * @param {componentEvent} eventData\n             * @param {String} eventData.eventType Custom event name\n             * @param {Number} eventData.page Moved page\n             * @example\n             * paganation.on(\"beforeMove\", function(eventData) {\n            var currentPage = eventData.page;\n         });\n             */\n            this.fire('afterMove', { page: targetPage });\n        }\n    },\n\n    /**\n     * Change option value\n     * @param {String} optionKey The target option key\n     * @param {*} optionValue The target option value\n     * @private\n     */\n    setOption: function(optionKey, optionValue) {\n        this._options[optionKey] = optionValue;\n    },\n\n    /**\n     * Get current page\n     * @returns {Number} Current page\n     */\n    getCurrentPage: function() {\n        return this._currentPage || this._options['page'];\n    },\n\n    /**\n     * Get item  index from list\n     * @param {Number} pageNumber Page number\n     * @returns {number}\n     */\n    getIndexOfFirstItem: function(pageNumber) {\n        return this.getOption('itemPerPage') * (pageNumber - 1) + 1;\n    },\n\n    /**\n     * Get Last page number\n     * @returns {number}\n     * @private\n     */\n    _getLastPage: function() {\n        return Math.ceil(this.getOption('itemCount') / this.getOption('itemPerPage'));\n    },\n\n    /**\n     * Index of list in total lists\n     * @param {Number} pageNumber Page number\n     * @return {Number}\n     * @private\n     */\n    _getPageIndex: function(pageNumber) {\n        // IsCenterAlign == true case\n        if (this.getOption('isCenterAlign')) {\n            var left = Math.floor(this.getOption('pagePerPageList') / 2),\n                pageIndex = pageNumber - left;\n            pageIndex = Math.max(pageIndex, 1);\n            pageIndex = Math.min(pageIndex, this._getLastPage() - this.getOption('pagePerPageList') + 1);\n            return pageIndex;\n        }\n        return Math.ceil(pageNumber / this.getOption(\"pagePerPageList\"));\n    },\n\n    /**\n     * Get page number of prev, next pages\n     * @param {String} relativeName Directions(pre_end, next_end, pre, next)\n     * @return {Number}\n     * @private\n     *     */\n    _getRelativePage: function(relativeName) {\n        var page = null,\n            isMovePage = this.getOption('moveUnit') === 'page',\n            currentPageIndex = this._getPageIndex(this.getCurrentPage());\n        if(this.getOption('isCenterAlign')) {\n            if (relativeName === 'pre') {\n                page = isMovePage ? this.getCurrentPage() - 1 : currentPageIndex - 1;\n            } else {\n                page = isMovePage ? this.getCurrentPage() + 1 : currentPageIndex + this.getOption('pagePerPageList');\n            }\n        } else {\n            if (relativeName === 'pre') {\n                page = isMovePage ? this.getCurrentPage() - 1 : (currentPageIndex - 1) * this.getOption('pagePerPageList');\n            } else {\n                page = isMovePage ? this.getCurrentPage() + 1 : currentPageIndex * this.getOption('pagePerPageList') + 1;\n            }\n        }\n        return page;\n    },\n\n    /**\n     * Get avail page number from over number\n     * If total page is 23, but input number is 30 => return 23\n     * @param {Number} page Page number\n     * @returns {number}\n     * @private\n     */\n    _convertToAvailPage: function(page) {\n        var lastPageNumber = this._getLastPage();\n        page = Math.max(page, 1);\n        page = Math.min(page, lastPageNumber);\n        return page;\n    },\n\n    /**\n     * Create require view set, notify view to update.\n     * @param {Number} page\n     * @private\n     */\n    _paginate: function(page){\n\n        // 뷰의 버튼 및 페이지를 모두 제거 및 복사\n        this._view.empty();\n\n        var viewSet = {};\n\n        viewSet.lastPage = this._getLastPage();\n        viewSet.currentPageIndex = this._getPageIndex(page);\n        viewSet.lastPageListIndex = this._getPageIndex(viewSet.lastPage);\n        viewSet.page = page;\n\n        this._view.update(viewSet, page);\n    },\n\n    /**\n     * Pagelist click event hadnler\n     * @param {JQueryEvent} event\n     * @private\n     */\n    _onClickPageList: function(event) {\n\n        event.preventDefault();\n        var page = null,\n            targetElement = $(event.target),\n            targetPage;\n\n        if (this._view.isIn(targetElement, this.getOption('$pre_endOn'))) {\n            page = 1;\n        } else if (this._view.isIn(targetElement, this.getOption('$lastOn'))) {\n            page = this._getLastPage();\n        } else if (this._view.isIn(targetElement, this.getOption('$preOn'))) {\n            page = this._getRelativePage('pre');\n        } else if (this._view.isIn(targetElement, this.getOption('$nextOn'))) {\n            page = this._getRelativePage('next');\n        } else {\n\n            targetPage = this._view.getPageElement(targetElement);\n\n            if (targetPage &amp;&amp; targetPage.length) {\n                page = parseInt(targetPage.text(), 10);\n            } else {\n                return;\n            }\n        }\n\n        /**\n         Fire 'click' custom event when page button clicked\n         @param {componentEvent} eventData\n         @param {String} eventData.eventType Custom event name\n         @param {Number} eventData.page Page to move\n         @param {Function} eventData.stop Stop page move\n         **/\n\n        var isFired = this.invoke(\"click\", {\"page\" : page});\n        if (!isFired) {\n            return;\n        }\n\n        this.movePageTo(page);\n    }\n});\n// CustomEvent  Mixin\ntui.util.CustomEvents.mixin(Pagination);\n\nmodule.exports = Pagination;\n</code></pre>\n        </article>\n    </section>\n\n\n\n</div>\n\n"